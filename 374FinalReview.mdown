# Computer Systems Final Review and Homework Solutions
Problems taken from CSAPP book 2nd edition
John Pridmore



# TOPICS:
* exam is cumulative
* storage tech
* memory hierarchy
* cache memories
* exceptions
* processes  and process mgmt
* signals
* nonlocal jumps
* physical and virtual address spaces
* address translation, including translation lookaside buffers
* memory mapping
* dynamic memory
* file I/O
* threading

* __exam focuses on:__
  * malloclab
  	* practice problem 9.6 (malloc)
  * cachelab
  * exceptions processes, signals, and nonlocal jumps
  * virtual memory homework
  * threading homework


[Exceptions Solutions](#Exceptions HW Solutions)


## Malloc Practice (9.6):

Determine the block sizes and header values that would result from the following sequence ofmallocrequests.
Assumptions:
(1) The allocator maintains double-word alignment, and uses an implicit free list with the block format from Fig-ure 9.35.
(2) Block sizes are rounded up to the nearest multiple of 8 bytes.

Request    | Block Size (dec. bytes) | Block Header (hex)
---        |---                      |---
malloc(1)  |                         |
malloc(5)  |                         |
malloc(12) |                         |
malloc(13) |                         |

## Threading:

__each thread needs a separate call stack__

__==> threads do not share state__

calls and returns in separate threads are independent

## Threading Homework:
* 12.16, p. 1031

  write a version of hello.c (See example) that creates and reaps n joinable peer threads, where n is a command line argument
  hello.c:

  ```C
  // #include "csapp.h"
  void* thread(void* vargp);

  int main(){
    pthread_t tid;
    Pthread_create(&tid, NULL, thread, NULL);
    Pthread_join(tid, NULL);
    exit(0);
  }

  void* thread(void* vargp) { /* thread routine */
      printf("Hello, world!\n");
      return NULL;
    }
  ```

---

* 12.17, p. 1031:
  * A. The program in Figure 12.44 has a bug. The thread is supposed to sleep for 1 second and then print a string. However, when we run it on our system, nothing prints. Why?

  ```C
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <pthread.h>
  #include <unistd.h>

  void *thread(void *vargp);

  int main() {
    pthread_t tid;
    Pthread_create(&tid, NULL, thread, NULL);
    exit(0);
  }

  /* Thread routine */
  void *thread(void *vargp) {
    Sleep(1);
    printf("Hello, world!\n");
    return NULL;
  }
  ```

  * B. You can fix this bug by replacing the exit function in line 9 with one of two different Pthreads function calls. Which ones?

---
* 12.24, p. 1032:

The functions in the Rio I/O package (Section 10.4) are thread-safe. Are they reentrant as well?

---
## Virtual Memory Homework:
Note: Virtual Addresses are 14bits & Physical Addresses are 12bits

![Sample memory system used for following Qs](samplemem.PNG)

![Mem system cache table](samplememcache.PNG)


Index |13| 12 | 11 | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0
---   |---|--- |--- |---|---|---|---|---|---|---|---|---|---|---
Bits  |0|0|0|0|0|0|0|0|0|0|0|0|0|0

__TODO: PUT IN Page Table, TLB, and Cache information__

Index | 13 | 12 | 11 | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0
---   |--- |--- |--- |--- |---|---|---|---|---|---|---|---|---|---
Part |VPN| VPN| VPN| VPN|VPN| VPN|VPN|VPN|VPO|VPO|VPO|VPO|VPO|VPO
Bits  |0|0|0|0|0|0|0|0|0|0|0|0|0|0
---
* 9.11:
  * address:         0x027c
---
* 9.12:

  * address:         0x03a9

---
* 9.13:

  * address:

* 9.14:
*
  *

/*
 * Given an input file hello.txt that consists of the string “Hello, world!\n”,
 * write a C program that uses mmap to change the contents of hello.txt to
 * “Jello, world!\n”.
 */

---

## Exceptions:

* 8.10, p. 788

  * In this chapter, we have introduced some functions with unusual call and return behaviors:
    * setjmp
    * longjmp
    * execve
    * fork


 * Match each function with one of the following behaviors:
   * A. Called once, returns twice.
   * B. Called once, never returns.
   * C. Called once, returns one or more times.


* 8.11, p. 788

```C
#include "csapp.h"
int main() {
   int i;
   for(i=0;i<2;i++)
      Fork();
   printf("hello\n");
   exit(0);
 }
```

* 8.16, p. 790

```C
/* $begin forkprob7 */
#include "csapp.h"
int counter = 1;

int main()
{
    if (fork() == 0) {
	counter--;
	exit(0);
    }
    else {
	Wait(NULL);
	printf("counter = %d\n", ++counter);
    }
    exit(0);
}
/* $end forkprob7 */
```

## <a name="Exceptions HW Solutions"></a>Exceptions HW Solutions:

* 8.23, p. 793

One of your colleagues is thinking of using signals to allow a parent process to count events that occur in a child process. The idea is to notify the parent each time an event occurs by sending it a signal, and letting the parent’s signal handler increment a global counter variable, which the parent can then inspect after the child has terminated. However, when he runs the test program in Figure 8.41 on his system, he discovers that when the parent calls printf, counter always has a value of 2, even though the child has sent five signals to the parent. Perplexed, he comes to you for help. Can you explain the bug?

Code referenced:

```C
/* $begin counterprob */
#include "csapp.h"

int counter = 0;

void handler(int sig)
{
    counter++;
    sleep(1); /* Do some work in the handler */
    return;
}

int main()
{
    int i;

    Signal(SIGUSR2, handler);

    if (Fork() == 0) {  /* Child */
	for (i = 0; i < 5; i++) {
	    Kill(getppid(), SIGUSR2);
	    printf("sent SIGUSR2 to parent\n");
	}
	exit(0);
    }

    Wait(NULL);
    printf("counter=%d\n", counter);
    exit(0);
}
/* $end counterprob */
```

---

# SOLUTIONS:


## Malloc Solution

Thus, we need to store only the 29 high-order bits of the block size, freeing the remaining 3 bits to encode other information. In this case, we are using the least significant of these bits (theallocated bit) to indicate whether the block is allocated or free.

For example, suppose we have an allocated block with a block size of 24 (0x18) bytes. Then its header would be
 0x00000018 | 0x1 = 0x00000019
Similarly, a free block with a block size of 40 (0x28) bytes would have a header of
 0x00000028 | 0x0 = 0x00000028

Determine the block sizes and header values that would result from the following sequence ofmallocrequests.
Assumptions:
(1) The allocator maintains double-word alignment, and uses an implicit free list with the block format from Fig-ure 9.35.
(2) Block sizes are rounded up to the nearest multiple of 8 bytes.

Request    | Block Size (dec. bytes) | Block Header (hex)
---        |---                      |---
malloc(1)  |(4 + 1 = 5)   ==> __8__  | (8  ==> 0x8) + 1 (valid storage) = 0x9
malloc(13) |(13 + 4 = 17) ==> __24__ | (24 ==> 0x18) + 1 (valid storage) = 0x19
malloc(5)  |(5 + 4 = 9)   ==> __16__ | (16 ==> 0x10) + 1 (valid storage) = 0x11
malloc(12) |(12 + 4 = 16) ==> __16__ | (16 ==> 0x10) + 1 (valid storage) = 0x11



## Threading HW Solutions:
* 12.16, p. 1031

  ```C
  // #include "csapp.h"
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <pthread.h>
  #include <unistd.h>

  void* thread(void* vargp) { /* thread routine */
    printf("Hello, world!\n");
    return NULL;
  }
  int main(int argc, char* argv[]){
    int i;
    int t;
    int n = atoi(argv[1]);

  	if (argc != 2){
  		printf("please include the number of threads you would like to create reap \n");
  		return 1;
  	}
  	/*// printf("%d \n",n);*/
  	pthread_t tid;
  	for (i = 0; i < n; i++){
  	    tid = i;
        t = pthread_create(&tid, NULL, thread, NULL);
      }
    for (i = 0; i < n; i ++){
      tid = i;
      t = pthread_join(tid, NULL);
      }
    return(0);
  }
  ```

* 12.17, p. 1031:
  * a. because the thread is never joined so the thread routine is never run
  * b. pthread_join(tid, NULL); or pthread_exit

* 12.24, p. 1032:
  * if the buffers passed to each call (of RIO) are separate, then the functions are reentrant


## Virtual Memory HW Solutions:
* 9.11:
  * address:         0x027c
  * raw binary:      0010 0111 1100
  * adjusted binary: 00 0010 0111 1100

Index |13| 12 | 11 | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0
---   |---|--- |--- |---|---|---|---|---|---|---|---|---|---|---
---   |---|--- |--- |---|---|---|__TLBi__|__TLBi__|---|---|---|---|---|---
Bits  |0  |0   |0   |0  |1  |0  |0  |1  |1  |1  |1  |1  |0  |0

---   | BIN       | DEC
---   | ---       |---
VPN   | 0000 1001 |9
TLBi  |(00 00)01    |1
TLBt  |0 0010     |1
TLBhit|---        |miss
PgFlt?|---        |N
PPN   |(00)01 0001|17

C. Physical Address:


Index |11  | 10 | 9  | 8  | 7  | 6  | 5  | 4  | 3  | 2  | 1 | 0
---   |--- |--- |--- |--- |--- |--- |--- |--- |--- |--- |---|---
---   |cTag|cTag|cTag|cTag|cTag|cTag|cIdx|cIdx|cIdx|cIdx|cO |cO
Bits  |0   | 1  |0   |0   |0   |1   |1   |1   |1   |1   |0  |0

cTag = cache tag
cIdx = cache index
cO   = cache offset

---   | BIN       | DEC
---   | ---       |---
cO    | 00        |0
cIdx  | 1111      |15 == 0xf
cTag  |(00)01 0001|1
cHit? |---        |N
cByte |---        | -

* 9.14:

```C
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <fcntl.h>

/*
 * Given an input file hello.txt that consists of the string “Hello, world!\n”,
 * write a C program that uses mmap to change the contents of hello.txt to
 * “Jello, world!\n”.
 */

int main(){
    //FILE * f = fopen("hello.txt", "rw");
    int fd1, size;
    char* bufp;
    fd1 = open("hello.txt", O_RDWR);
    size = getpagesize();
    bufp = mmap(0, size, PROT_READ|PROT_WRITE, MAP_SHARED, fd1, 0);
    //printf("%c \n", bufp[0]);
    bufp[0] = 'J';
    //printf("%c \n", bufp[0]);
    close(fd1);
    return 0;
}
```

## <a name="Exceptions HW Solutions"></a>Exceptions Solutions:

### NOTES:

* Information regarding current processes may be obtained from system functions:
  * getpid- returns the Process ID (pid) of the current process
  * getppid- returns the pid of the current process' parent process, i.e., the process that started the current process

* Fork:
  * parent process creates a child process
  * ```pid_t  fork(void); // Returns: 0 to child, PID of child to parent, −1 on error```
  * __called once, returns twice__
    * returns pid of child to parent
    * retunrs 0 to Child
  * duplicate but separate address space

* execve
  * loads and executes programs
  * __overwrites current code, data, and stack__
  * __called once, (normally) never returns__

  ```C
  #include <unistd.h>
  int execve(const char *filename, char *const argv[], char *const envp[]);
  ```

* setjmp

  ```C
  #include <setjmp.h>
  int setjmp(jmp_buf env);
  int sigsetjmp(sigjmp_buf env, int savesigs);
  ```

* longjmp
  *


* 8.10, p. 788

  * In this chapter, we have introduced some functions with unusual call and return behaviors:
    * setjmp
    * longjmp
    * execve
    * fork

---


 * Match each function with one of the following behaviors:
   * A. Called once, returns twice.
   * B. Called once, never returns.
   * C. Called once, returns one or more times.

* ### 8.10 A:
* setjmp C
* longjmp B
* execve B
* fork A

---

* ### 8.11, p. 788: How many "hello" output lines does this program print?

```C
#include "csapp.h"
int main() {
   int i;
   for(i=0;i<2;i++)
      Fork();
   printf("hello\n");
   exit(0);
 }
```

#### note: n calls to fork result in 2^n processes

* ### 8.11 A:
```
proc1:
  fork() ------------> child1:
    ||                    (i (1) < 2):
    ||                    fork() --------->  grandchild1:
    ||                      ||                  (i (2) == 2):
    ||                      ||                  breaks for loop;
    ||                      ||                  printf("hello\n");
    ||                      ||                  end grandchild1;
    ||                    printf("hello\n")
    ||                    end child1;
    ||
  fork() ------------> child2:
    ||                    (i (2) == 2):
    ||                    breaks loop;
    ||                    printf("hello\n");
    ||                    end child2;
  printf("hello\n");
end proc1;```


hello is printed 4 times:
once by the original process (proc1)
  once by the child (child1) created by the original process' (proc1) fork
    once by the child (grandchild1) created by the child's (child1) fork
  once by the second child (child2) created by the original process (proc1)'s fork
---

* 8.16, p. 790: Q: what's this program's output?

```C
/* $begin forkprob7 */

int counter = 1;

int main() {
  if (fork() == 0) { // if the process is a child, decrement the counter
	 counter--;
	 exit(0);
  } else { // makes the parent wait until its child is finished executing
	 Wait(NULL);
	 printf("counter = %d\n", ++counter); // increments counter to 2 and prints it
  }
  exit(0);
}
/* $end forkprob7 */ ```

* ### 8.16 A:
  ```
  /*OUTPUT*/
  counter = 2
  ```

  * the counter starts at 1.
  * when fork is called (within the if() statement) it creates a child process
    * the child process decrements its counter and terminates
  * the parent process does not share the variable counter with its child, so
  parent.counter is still == 1. parent process increments counter and prints it.

* 8.23, p. 793 Q:

One of your colleagues is thinking of using signals to allow a parent process to count events that occur in a child process. The idea is to notify the parent each time an event occurs by sending it a signal, and letting the parent’s signal handler increment a global counter variable, which the parent can then inspect after the child has terminated. However, when he runs the test program in Figure 8.41 on his system, he discovers that when the parent calls printf, counter always has a value of 2, even though the child has sent five signals to the parent. Perplexed, he comes to you for help. Can you explain the bug?

Code referenced:

```C
/* $begin counterprob */
#include "csapp.h"

int counter = 0;

void handler(int sig)
{
    counter++; // parent increments counter
    sleep(1);  /* Do some work in the handler*/
    return;    // parent is sleeping while the other 4 signals are sent
}

int main() {
  int i;

  Signal(SIGUSR2, handler);

  if (Fork() == 0) {  /* Child */
  	for (i = 0; i < 5; i++) { // child sends signal to parent 5 times
  	    Kill(getppid(), SIGUSR2);
  	    printf("sent SIGUSR2 to parent\n");
  	}
	exit(0);
  }
  Wait(NULL);
  printf("counter=%d\n", counter);
  exit(0);
}
/* $end counterprob */
```

* ### 8.23 A:

The child sends a signal and the parent is interrupted while waiting for the child to terminate. The parent increments the counter to 1 and then sleeps. While the parent is sleeping, the child sends 4 more signals to the parent. These signals set the bit in the bit vector where the signal is pending. Once the parent wakes and returns from the signal handler, the kernel then calls the handler again because of the pending signal. Again, the parent increments the counter. Then, the child exits and the parent prints the value of counter, which is now 2.
